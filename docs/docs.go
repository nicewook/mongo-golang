// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "hyunseok.jeong",
            "url": "http://www.annotation-ai.com",
            "email": "hyunseok.jeong@annotation-ai.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/{db}/{collection}": {
            "post": {
                "description": "Insert products to the designated database and collection\nYou can insert just one product instead of array of product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Insert products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database Name",
                        "name": "db",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Collection Name",
                        "name": "collection",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Array of Product Body",
                        "name": "Products",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.Product"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResp"
                        }
                    },
                    "400": {
                        "description": "error messages",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete documents with a filter from the designated database and collection\nIf there's no filter, it will delete all the documents",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Delete documents with a filter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database Name",
                        "name": "db",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Collection Name",
                        "name": "collection",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Any root field can be used as a filter",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResp"
                        }
                    }
                }
            }
        },
        "/v1/{db}/{collection}/count": {
            "get": {
                "description": "Count documents with a filter from the designated database and collection\nIf there's no filter, it will count all the documents",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Count documents with a filter",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database Name",
                        "name": "db",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Collection Name",
                        "name": "collection",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Any root field can be used as a filter",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResp"
                        }
                    }
                }
            }
        },
        "/v1/{db}/{collection}/find": {
            "get": {
                "description": "Find many products with a filter from the designated database and collection\nIf there's no filter, it will get all the documents",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Find many products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database Name",
                        "name": "db",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Collection Name",
                        "name": "collection",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Any root field can be used as a filter",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResp"
                        }
                    }
                }
            }
        },
        "/v1/{db}/{collection}/findone": {
            "get": {
                "description": "Find one product with a filter from the designated database and collection\nYou should have at least one filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Find one product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database Name",
                        "name": "db",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Collection Name",
                        "name": "collection",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Any root field can be used as a filter",
                        "name": "q",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResp"
                        }
                    }
                }
            }
        },
        "/v1/{db}/{collection}/{productName}/review": {
            "put": {
                "description": "Add a review to the document only if it is already exist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Add a review to the document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database Name",
                        "name": "db",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Collection Name",
                        "name": "collection",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product Name",
                        "name": "productName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResp"
                        }
                    }
                }
            }
        },
        "/v1/{db}/{collection}/{productName}/tag": {
            "put": {
                "description": "Add a tag to the document only if it is already exist",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Add a tag to the document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Database Name",
                        "name": "db",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Collection Name",
                        "name": "collection",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Product Name",
                        "name": "productName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.ErrorResp"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ErrorResp": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.Product": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "reviews": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Review"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "dto.ProductAddReviewResp": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.ProductAddTagResp": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.ProductCountDocumentsResp": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                }
            }
        },
        "dto.ProductDeleteDocumentsResp": {
            "type": "object",
            "properties": {
                "count": {
                    "type": "integer"
                }
            }
        },
        "dto.ProductFindOneResp": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "reviews": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.Review"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "version": {
                    "type": "integer"
                }
            }
        },
        "dto.ProductInsertResp": {
            "type": "object",
            "properties": {
                "insertedIDs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.Review": {
            "type": "object",
            "properties": {
                "comment": {
                    "type": "string"
                },
                "created_at": {
                    "description": "RFC3339",
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8888",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Golang MongoDB CRUD - Clean Architecture example",
	Description:      "This show two things. Golang-MongoDB CRUD server and Clean Architecture.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
